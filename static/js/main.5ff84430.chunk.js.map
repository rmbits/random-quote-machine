{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["gradient","hexValues","populate","a","i","x","Math","round","random","newColor1","newColor2","App","props","state","randomIndex","background","getNewQuote","bind","this","setState","floor","data","length","quote","Quote","author","Author","twitterUrl","encodeURI","className","style","id","href","target","title","rel","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"o7JA4DA,SAASA,IAEP,IAAIC,EAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAEzE,SAASC,EAASC,GAChB,IAAM,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAM,CAC5B,IAAIC,EAAIC,KAAKC,MAAuB,GAAhBD,KAAKE,UAEzBL,GADQF,EAAUI,GAGpB,OAAOF,EAGT,IAAIM,EAAYP,EAAS,KACrBQ,EAAYR,EAAS,KAKzB,MAFe,mBAFHI,KAAKC,MAAuB,IAAhBD,KAAKE,UAEe,QAAUC,EAAY,KAAOC,EAAY,IAOxEC,M,kDA3Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,YAAa,EACbC,WAAYf,KAGd,EAAKgB,YAAc,EAAKA,YAAYC,KAAjB,gBAPF,E,0DAWjBC,KAAKC,SAAS,CACZL,YAAaR,KAAKc,MAAMd,KAAKE,SAAWa,EAAKC,QAC7CP,WAAYf,Q,+BAMd,IAAMuB,EAAQF,EAAKH,KAAKL,MAAMC,aAAaU,MACrCC,EAASJ,EAAKH,KAAKL,MAAMC,aAAaY,OACtCC,EAAaC,UAAU,0DAA4DL,EAAQ,OAASE,GAI1G,OACE,yBAAKI,UAAU,UAAUC,MAAO,CAACf,WAAYG,KAAKL,MAAME,aACtD,yBAAKgB,GAAG,YAAYF,UAAU,aAE5B,yBAAKE,GAAG,QAAQF,UAAU,SACxB,yBAAKE,GAAG,QAAR,IAAiBR,EAAjB,KACA,6BACA,yBAAKQ,GAAG,UAAR,MAAqBN,IAGvB,yBAAKI,UAAU,WAEb,uBAAGG,KAAML,EAAYI,GAAG,cAAcF,UAAU,eAAeI,OAAO,SAASC,MAAM,YAAYC,IAAI,uBACnG,uBAAGN,UAAU,mBAEf,4BAAQE,GAAG,YAAYF,UAAU,eAAeO,QAASlB,KAAKF,aAA9D,oB,GA1CMqB,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5ff84430.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport data from './quotes.json'\n\n//const API = 'https://api.jsonbin.io/b/5eb422ae8284f36af7b71ab7/2';\n//const authors = data.map((item, index) => <li key={index}>{item.Quote}</li>);\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      randomIndex: 1,\n      background: gradient()      \n    };\n    \n    this.getNewQuote = this.getNewQuote.bind(this);\n  }\n\n  getNewQuote() {\n    this.setState({\n      randomIndex: Math.floor(Math.random() * data.length),\n      background: gradient()\n    });\n  }\n\n  render() {\n\n    const quote = data[this.state.randomIndex].Quote;\n    const author = data[this.state.randomIndex].Author;\n    const twitterUrl = encodeURI('https://twitter.com/intent/tweet?hashtags=quotes&text=\"' + quote + '\" - ' + author);\n    \n    //console.log(this.state.randomStyle)\n    \n    return (\n      <div className=\"wrapper\" style={{background: this.state.background}}>\n        <div id=\"quote-box\" className=\"quote-box\">\n          \n          <div id=\"quote\" className=\"quote\" >\n            <div id=\"text\">\"{quote}\"</div>\n            <br/>\n            <div id=\"author\"> - {author}</div>\n          </div>\n\n          <div className=\"buttons\">\n            \n            <a href={twitterUrl} id=\"tweet-quote\" className=\"btn btn-info\" target=\"_blank\" title=\"Tweet it!\" rel=\"noopener noreferrer\">\n              <i className=\"fa fa-twitter\"></i>\n            </a>\n            <button id=\"new-quote\" className=\"btn btn-info\" onClick={this.getNewQuote}>New Quote</button>          \n          </div>\n          \n        </div>\n      </div>\n    );\n  }\n}\n\n// Random gradient color generator function\n// Source: https://css-tricks.com/gradient-borders-in-css/\nfunction gradient() {\n\n  var hexValues = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\"];\n  \n  function populate(a) {\n    for ( var i = 0; i < 6; i++ ) {\n      var x = Math.round( Math.random() * 14 );\n      var y = hexValues[x];\n      a += y;\n    }\n    return a;\n  }\n  \n  var newColor1 = populate('#');\n  var newColor2 = populate('#');\n  var angle = Math.round( Math.random() * 360 );\n  \n  var gradient = \"linear-gradient(\" + angle + \"deg, \" + newColor1 + \", \" + newColor2 + \")\";\n\n  return gradient;\n  \n  //document.getElementById(\"container\").style.background = gradient;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}